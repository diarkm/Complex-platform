{"ast":null,"code":"import*as firebase from\"firebase/app\";import{history}from\"../../../history\";import\"firebase/auth\";import\"firebase/database\";import axios from\"axios\";import{config}from\"../../../authServices/firebase/firebaseConfig\";import{AgInputNumberField}from\"ag-grid-community\";// Init firebase if not already initialized\nif(!firebase.apps.length){firebase.initializeApp(config);}var firebaseAuth=firebase.auth();// const initAuth0 = new auth0.WebAuth(configAuth)\n/*\nexport const submitLoginWithFireBase = (email, password, remember) => {\n  return dispatch => {\n    let userEmail = null,\n      loggedIn = false\n    firebaseAuth\n      .signInWithEmailAndPassword(email, password)\n      .then(result => {\n        firebaseAuth.onAuthStateChanged(user => {\n          result.user.updateProfile({\n            displayName: \"Admin\"\n          })\n          let name = result.user.displayName\n          if (user) {\n            userEmail = user.email\n            loggedIn = true\n            dispatch({\n              type: \"LOGIN_WITH_EMAIL\",\n              payload: {\n                email: userEmail,\n                name,\n                isSignedIn: loggedIn,\n                loggedInWith: \"firebase\"\n              }\n            })\n          }\n          if (user && remember) {\n            firebase\n              .auth()\n              .setPersistence(firebase.auth.Auth.Persistence.SESSION)\n              .then(() => {\n                dispatch({\n                  type: \"LOGIN_WITH_EMAIL\",\n                  payload: {\n                    email: userEmail,\n                    name,\n                    isSignedIn: loggedIn,\n                    remember: true,\n                    loggedInWith: \"firebase\"\n                  }\n                })\n              })\n          }\n          history.push(\"/\")\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithFB = () => {\n  return dispatch => {\n    let provider = new firebase.auth.FacebookAuthProvider()\n    provider.setCustomParameters({\n      display: \"popup\"\n    })\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(result => {\n        // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n        let token = result.credential.accessToken,\n          // The signed-in user info.\n          user = result.user.email\n        dispatch({\n          type: \"LOGIN_WITH_FB\",\n          payload: {\n            user,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        if (user) history.push(\"/\")\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithTwitter = () => {\n  return dispatch => {\n    let provider = new firebase.auth.TwitterAuthProvider()\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(function(result) {\n        let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.user.displayName,\n          photoUrl = result.user.photoURL\n        dispatch({\n          type: \"LOGIN_WITH_TWITTER\",\n          payload: {\n            user,\n            name,\n            photoUrl,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n*/var accessToken='';var apiURL='http://79.143.31.221';var authAxios=axios.create({baseURL:apiURL,headers:{Authorization:\"Bearer \".concat(accessToken)}});export var loginForm=function loginForm(user){return function(dispatch){authAxios.post(\"/user/login\",{login:user.login,password:user.password}).then(function(response){console.log({response:response});var isLogged;//Если такой пользователь существует\nif(response.data){accessToken=response.data.token;isLogged=response.data.response;if(isLogged){dispatch({type:\"LOGIN_WITH_LOGIN\",payload:{isLogged:isLogged,loggedInWith:\"login\",name:\"Кундакбаев Диар\"}});history.push(\"/dashboard\");}else{console.log(response.data.errors);}}}).catch(function(err){return console.log(err);});};};export var loginWithGoogle=function loginWithGoogle(){return function(dispatch){var provider=new firebase.auth.GoogleAuthProvider();firebaseAuth.signInWithPopup(provider).then(function(result){var token=result.credential.accessToken,user=result.user.email,name=result.user.displayName,photoUrl=result.user.photoURL;dispatch({type:\"LOGIN_WITH_GOOGLE\",payload:{email:user,name:name,photoUrl:photoUrl,token:token,loggedInWith:\"firebase\"}});history.push(\"/\");}).catch(function(error){console.log(error);});};};/*\nexport const loginWithGithub = () => {\n  return dispatch => {\n    let provider = new firebase.auth.GithubAuthProvider()\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(function(result) {\n        let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.additionalUserInfo.username,\n          photoUrl = result.user.photoURL\n\n        dispatch({\n          type: \"LOGIN_WITH_GITHUB\",\n          payload: {\n            user,\n            name,\n            photoUrl,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithJWT = user => {\n  return dispatch => {\n    axios\n      .post(\"/api/authenticate/login/user\", {\n        email: user.email,\n        password: user.password\n      })\n      .then(response => {\n        var loggedInUser\n\n        if (response.data) {\n          loggedInUser = response.data.user\n\n          dispatch({\n            type: \"LOGIN_WITH_JWT\",\n            payload: { loggedInUser, loggedInWith: \"jwt\" }\n          })\n\n          history.push(\"/\")\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}*/export var logoutWithJWT=function logoutWithJWT(){return function(dispatch){dispatch({type:\"LOGOUT_WITH_JWT\",payload:{}});history.push(\"/pages/login\");};};export var logoutWithFirebase=function logoutWithFirebase(user){return function(dispatch){dispatch({type:\"LOGOUT_WITH_FIREBASE\",payload:{}});history.push(\"/pages/login\");};};export var changeRole=function changeRole(role){return function(dispatch){return dispatch({type:\"CHANGE_ROLE\",userRole:role});};};","map":{"version":3,"sources":["D:/Work/Projects/GIQ/giq.itgeek.kz/src/redux/actions/auth/loginActions.js"],"names":["firebase","history","axios","config","AgInputNumberField","apps","length","initializeApp","firebaseAuth","auth","accessToken","apiURL","authAxios","create","baseURL","headers","Authorization","loginForm","user","dispatch","post","login","password","then","response","console","log","isLogged","data","token","type","payload","loggedInWith","name","push","errors","catch","err","loginWithGoogle","provider","GoogleAuthProvider","signInWithPopup","result","credential","email","displayName","photoUrl","photoURL","error","logoutWithJWT","logoutWithFirebase","changeRole","role","userRole"],"mappings":"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","sourcesContent":["import * as firebase from \"firebase/app\"\nimport { history } from \"../../../history\"\nimport \"firebase/auth\"\nimport \"firebase/database\"\nimport axios from \"axios\"\nimport { config } from \"../../../authServices/firebase/firebaseConfig\"\nimport { AgInputNumberField } from \"ag-grid-community\"\n\n// Init firebase if not already initialized\nif (!firebase.apps.length) {\n  firebase.initializeApp(config)\n}\n\nlet firebaseAuth = firebase.auth()\n\n// const initAuth0 = new auth0.WebAuth(configAuth)\n/*\nexport const submitLoginWithFireBase = (email, password, remember) => {\n  return dispatch => {\n    let userEmail = null,\n      loggedIn = false\n    firebaseAuth\n      .signInWithEmailAndPassword(email, password)\n      .then(result => {\n        firebaseAuth.onAuthStateChanged(user => {\n          result.user.updateProfile({\n            displayName: \"Admin\"\n          })\n          let name = result.user.displayName\n          if (user) {\n            userEmail = user.email\n            loggedIn = true\n            dispatch({\n              type: \"LOGIN_WITH_EMAIL\",\n              payload: {\n                email: userEmail,\n                name,\n                isSignedIn: loggedIn,\n                loggedInWith: \"firebase\"\n              }\n            })\n          }\n          if (user && remember) {\n            firebase\n              .auth()\n              .setPersistence(firebase.auth.Auth.Persistence.SESSION)\n              .then(() => {\n                dispatch({\n                  type: \"LOGIN_WITH_EMAIL\",\n                  payload: {\n                    email: userEmail,\n                    name,\n                    isSignedIn: loggedIn,\n                    remember: true,\n                    loggedInWith: \"firebase\"\n                  }\n                })\n              })\n          }\n          history.push(\"/\")\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithFB = () => {\n  return dispatch => {\n    let provider = new firebase.auth.FacebookAuthProvider()\n    provider.setCustomParameters({\n      display: \"popup\"\n    })\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(result => {\n        // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n        let token = result.credential.accessToken,\n          // The signed-in user info.\n          user = result.user.email\n        dispatch({\n          type: \"LOGIN_WITH_FB\",\n          payload: {\n            user,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        if (user) history.push(\"/\")\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithTwitter = () => {\n  return dispatch => {\n    let provider = new firebase.auth.TwitterAuthProvider()\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(function(result) {\n        let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.user.displayName,\n          photoUrl = result.user.photoURL\n        dispatch({\n          type: \"LOGIN_WITH_TWITTER\",\n          payload: {\n            user,\n            name,\n            photoUrl,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n*/\n\nlet accessToken = ''\n\nconst apiURL = 'http://79.143.31.221'\n\nconst authAxios = axios.create({\n  baseURL: apiURL,\n  headers: {\n    Authorization: `Bearer ${accessToken}`\n  }\n\n})\n\nexport const loginForm = user => {\n  return dispatch => {\n    authAxios\n      .post(`/user/login`, {\n        login: user.login,\n        password: user.password\n      })\n      .then(response => {\n        console.log({response});\n        var isLogged;\n\n        //Если такой пользователь существует\n        if (response.data) {\n          accessToken = response.data.token;\n          isLogged = response.data.response;\n          if(isLogged){\n            dispatch({\n              type: \"LOGIN_WITH_LOGIN\",\n              payload: { \n                isLogged, \n                loggedInWith: \"login\",\n                name: \"Кундакбаев Диар\"\n              }\n            })\n            history.push(\"/dashboard\")\n          } else {\n            console.log(response.data.errors);\n          }\n\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport const loginWithGoogle = () => {\n  return dispatch => {\n    let provider = new firebase.auth.GoogleAuthProvider()\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(function(result) {\n        let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.user.displayName,\n          photoUrl = result.user.photoURL\n        dispatch({\n          type: \"LOGIN_WITH_GOOGLE\",\n          payload: {\n            email: user,\n            name: name,\n            photoUrl,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n/*\nexport const loginWithGithub = () => {\n  return dispatch => {\n    let provider = new firebase.auth.GithubAuthProvider()\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(function(result) {\n        let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.additionalUserInfo.username,\n          photoUrl = result.user.photoURL\n\n        dispatch({\n          type: \"LOGIN_WITH_GITHUB\",\n          payload: {\n            user,\n            name,\n            photoUrl,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithJWT = user => {\n  return dispatch => {\n    axios\n      .post(\"/api/authenticate/login/user\", {\n        email: user.email,\n        password: user.password\n      })\n      .then(response => {\n        var loggedInUser\n\n        if (response.data) {\n          loggedInUser = response.data.user\n\n          dispatch({\n            type: \"LOGIN_WITH_JWT\",\n            payload: { loggedInUser, loggedInWith: \"jwt\" }\n          })\n\n          history.push(\"/\")\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}*/\n\nexport const logoutWithJWT = () => {\n  return dispatch => {\n    dispatch({ type: \"LOGOUT_WITH_JWT\", payload: {} })\n    history.push(\"/pages/login\")\n  }\n}\n\nexport const logoutWithFirebase = user => {\n  return dispatch => {\n    dispatch({ type: \"LOGOUT_WITH_FIREBASE\", payload: {} })\n    history.push(\"/pages/login\")\n  }\n}\n\nexport const changeRole = role => {\n  return dispatch => dispatch({ type: \"CHANGE_ROLE\", userRole: role })\n}\n"]},"metadata":{},"sourceType":"module"}