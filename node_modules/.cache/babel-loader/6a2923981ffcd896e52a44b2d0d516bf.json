{"ast":null,"code":"import mock from\"../mock\";import jwt from\"jsonwebtoken\";var users=[{id:1,email:\"demo@demo.com\",password:\"demodemo\",name:\"Demo\"},{id:2,email:\"admin@admin.com\",password:\"adminadmin\",name:\"Admin\"},{id:3,email:\"staff@staff.com\",password:\"staff\",name:\"Staff\"}];var jwtConfig={\"secret\":\"dd5f3089-40c3-403d-af14-d0c228b05cb4\",\"expireTime\":8000};// POST: Check User Login Details and return user\nmock.onPost(\"/api/authenticate/login/user\").reply(function(request){var _JSON$parse=JSON.parse(request.data),email=_JSON$parse.email,password=_JSON$parse.password;var error=\"Something went wrong\";var user=users.find(function(user){return user.email===email&&user.password===password;});if(user){try{var accessToken=jwt.sign({id:user.id},jwtConfig.secret,{expiresIn:jwtConfig.expireTime});var userData=Object.assign({},user,{loggedInWith:\"jwt\"});delete userData.password;var response={user:userData,accessToken:accessToken};return[200,response];}catch(e){error=e;}}else{error=\"Email Or Password Invalid\";}return[200,{error:error}];});mock.onPost(\"/api/authenticate/register/user\").reply(function(request){if(request.data.length>0){var _JSON$parse2=JSON.parse(request.data),email=_JSON$parse2.email,password=_JSON$parse2.password,name=_JSON$parse2.name;var isEmailAlreadyInUse=users.find(function(user){return user.email===email;});var error={email:isEmailAlreadyInUse?'This email is already in use.':null,name:name===''?'Please enter your name.':null};if(!error.name&&!error.email){var userData={email:email,password:password,name:name};// Add user id\nvar length=users.length;var lastIndex=0;if(length){lastIndex=users[length-1].id;}userData.id=lastIndex+1;users.push(userData);var accessToken=jwt.sign({id:userData.id},jwtConfig.secret,{expiresIn:jwtConfig.expireTime});var user=Object.assign({},userData);delete user['password'];var response={user:user,accessToken:accessToken};return[200,response];}else{return[200,{error:error}];}}});mock.onPost('/api/authenticate/refresh-token').reply(function(request){var _JSON$parse3=JSON.parse(request.data),accessToken=_JSON$parse3.accessToken;try{var _jwt$verify=jwt.verify(accessToken,jwtConfig.secret),id=_jwt$verify.id;var userData=Object.assign({},users.find(function(user){return user.id===id;}));var newAccessToken=jwt.sign({id:userData.id},jwtConfig.secret,{expiresIn:jwtConfig.expiresIn});delete userData['password'];var response={userData:userData,accessToken:newAccessToken};return[200,response];}catch(e){var error=\"Invalid access token\";return[401,{error:error}];}});","map":{"version":3,"sources":["D:/Work/Projects/GIQ/giq.itgeek.kz/src/@fake-db/auth/authentication.js"],"names":["mock","jwt","users","id","email","password","name","jwtConfig","onPost","reply","request","JSON","parse","data","error","user","find","accessToken","sign","secret","expiresIn","expireTime","userData","Object","assign","loggedInWith","response","e","length","isEmailAlreadyInUse","lastIndex","push","verify","newAccessToken"],"mappings":"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","sourcesContent":["import mock from \"../mock\"\nimport jwt from \"jsonwebtoken\"\n\nlet users = [\n  {\n    id: 1,\n    email: \"demo@demo.com\",\n    password: \"demodemo\",\n    name: \"Demo\"\n  },\n  {\n    id: 2,\n    email: \"admin@admin.com\",\n    password: \"adminadmin\",\n    name: \"Admin\"\n  },\n  {\n    id: 3,\n    email: \"staff@staff.com\",\n    password: \"staff\",\n    name: \"Staff\"\n  }\n]\n\nconst jwtConfig = {\n  \"secret\"   : \"dd5f3089-40c3-403d-af14-d0c228b05cb4\",\n  \"expireTime\": 8000\n}\n\n// POST: Check User Login Details and return user\nmock.onPost(\"/api/authenticate/login/user\").reply( request => {\n\n  let { email, password } = JSON.parse(request.data)\n  let error = \"Something went wrong\"\n\n  const user = users.find(user => user.email === email && user.password === password)\n\n  if (user) {\n\n    try {\n\n      const accessToken = jwt.sign({id: user.id}, jwtConfig.secret, {expiresIn: jwtConfig.expireTime})\n\n      const userData = Object.assign({}, user, {loggedInWith: \"jwt\"})\n\n      delete userData.password\n\n      const response = {\n        user : userData,\n        accessToken: accessToken\n      }\n\n      return [200, response]\n\n    } catch(e) {\n      error = e\n    }\n  }else {\n    error = \"Email Or Password Invalid\"\n  }\n\n  return [200, {error}]\n})\n\nmock.onPost(\"/api/authenticate/register/user\").reply( request => {\n  if(request.data.length > 0){\n\n    let { email, password, name } = JSON.parse(request.data)\n    const isEmailAlreadyInUse = users.find((user) => user.email === email)\n    const error = {\n      email      : isEmailAlreadyInUse ? 'This email is already in use.' : null,\n      name: name === '' ? 'Please enter your name.' : null\n    }\n\n    if ( !error.name && !error.email ) {\n\n      let userData = {\n        email: email,\n        password: password,\n        name: name\n      }\n\n      // Add user id\n      const length = users.length\n      let lastIndex = 0\n      if(length){\n        lastIndex = users[length - 1].id\n      }\n      userData.id = lastIndex + 1\n\n      users.push(userData)\n\n      const accessToken = jwt.sign({id: userData.id}, jwtConfig.secret, {expiresIn: jwtConfig.expireTime})\n\n      let user = Object.assign({}, userData)\n      delete user['password']\n      const response = { user: user, accessToken: accessToken }\n\n      return [200, response]\n    } else {\n      return [200, {error}]\n    }\n\n  }\n\n})\n\nmock.onPost('/api/authenticate/refresh-token').reply((request) => {\n\n  const {accessToken} = JSON.parse(request.data)\n\n  try {\n    const {id} = jwt.verify(accessToken, jwtConfig.secret)\n\n    let userData = Object.assign({}, users.find(user => user.id === id))\n\n    const newAccessToken = jwt.sign({id: userData.id}, jwtConfig.secret, {expiresIn: jwtConfig.expiresIn})\n\n    delete userData['password']\n    const response = {\n      userData: userData,\n      accessToken: newAccessToken\n    }\n\n    return [200, response]\n  } catch (e){\n    const error = \"Invalid access token\"\n    return [401, {error}]\n  }\n})\n"]},"metadata":{},"sourceType":"module"}